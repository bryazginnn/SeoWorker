\c seo;

/*
ОБНОВЛЕНИЕ корридора
*/

CREATE OR REPLACE FUNCTION CONDITION_LOCK(
    vCONDITION_ID integer
) RETURNS BOOLEAN AS $$
    DECLARE vCONDITION_LOCKED BOOLEAN;
    BEGIN

        SELECT CONDITION_LOCKED INTO vCONDITION_LOCKED FROM conditions WHERE CONDITION_ID = vCONDITION_ID FOR UPDATE;

        IF NOT vCONDITION_LOCKED THEN
            UPDATE conditions SET CONDITION_LOCKED = TRUE, DATE_CALC = NOW() WHERE CONDITION_ID = vCONDITION_ID;
        END IF;

        RETURN NOT vCONDITION_LOCKED;

    END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION CONDITION_UNLOCK(
    vCONDITION_ID integer
) RETURNS void AS $$
    BEGIN

        UPDATE conditions SET CONDITION_LOCKED = FALSE WHERE CONDITION_ID = vCONDITION_ID;

    END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION CONDITION_CLEAR(
    vCONDITION_ID integer
) RETURNS void AS $$
    BEGIN

        DELETE FROM scontents WHERE SPAGE_ID IN (SELECT SP.SPAGE_ID FROM spages SP WHERE SP.CONDITION_ID = vCONDITION_ID);
        DELETE FROM spages WHERE CONDITION_ID = vCONDITION_ID;
        DELETE FROM urls WHERE
            NOT EXISTS (SELECT 1 FROM scontents SC WHERE SC.URL_ID = URL_ID)
            AND NOT EXISTS (SELECT 1 FROM condurls CU WHERE CU.URL_ID = URL_ID);

    END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION CONDITION_REPLACE(
    vCONDITION_ID integer,
    jSEARCH_RESULT JSON
) RETURNS INTEGER AS $$
    DECLARE jLINK JSON;
    DECLARE vSPAGE_ID INTEGER;
    DECLARE vSTART_FROM INTEGER DEFAULT 0;
    DECLARE vURL_ID INTEGER;
    BEGIN

        IF JSON_IS_EMPTY(jSEARCH_RESULT) THEN
            RAISE EXCEPTION 'CONDITION_REPLACE: jSEARCH_RESULT is empty!';
        END IF;
        IF (jSEARCH_RESULT->>'pageNumber') IS NULL THEN
            RAISE EXCEPTION 'CONDITION_REPLACE: jSEARCH_RESULT->>pageNumber field is empty!';
        END IF;
        IF JSON_IS_EMPTY(jSEARCH_RESULT->'links') THEN
            RAISE EXCEPTION 'CONDITION_REPLACE: jSEARCH_RESULT->links array is empty!';
        END IF;


        -- SELECT (jSEARCH_RESULT->>'startLinksNumber')::integer INTO vSTART_FROM;
        SELECT MAX(POSITION_N) INTO vSTART_FROM FROM scontents SC JOIN spages SP USING(SPAGE_ID) WHERE SP.CONDITION_ID = vCONDITION_ID;

        INSERT INTO spages (CONDITION_ID, PAGE_NUMBER, DATE_CREATE) VALUES
            (vCONDITION_ID, (jSEARCH_RESULT->>'pageNumber')::integer, NOW()) RETURNING SPAGE_ID INTO vSPAGE_ID;

        FOR jLINK IN SELECT * FROM json_array_elements(jSEARCH_RESULT->'links')
        LOOP

            IF (jLINK->>'url') IS NULL THEN
                RAISE EXCEPTION 'CONDITION_REPLACE: jLINK->>url field is empty!';
            END IF;
            IF (jLINK->>'id') IS NULL THEN
                RAISE EXCEPTION 'CONDITION_REPLACE: jLINK->>id field is empty!';
            END IF;

            SELECT URL_INSERT_IGNORE(jLINK->>'url') INTO vURL_ID;

            INSERT INTO scontents (URL_ID, SPAGE_ID, POSITION_N, DATE_CREATE)
                SELECT vURL_ID, vSPAGE_ID, COALESCE(vSTART_FROM,0) + (jLINK->>'id')::integer, NOW();

                RAISE NOTICE  '%!', jLINK->>'params';
            IF NOT JSON_IS_EMPTY(jLINK->'params') THEN
                PERFORM PARAMS_REPLACE(vURL_ID, vCONDITION_ID, jLINK->'params');
            END IF;

        END LOOP;

        RETURN vSPAGE_ID;

    END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION JSON_IS_EMPTY(
    vJSON JSON
) RETURNS BOOLEAN AS $$
    BEGIN

        RETURN vJSON::TEXT = '{}' OR vJSON::TEXT IS NULL;

    END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION CONDITION_INSERT_IGNORE(
    vCONDITION_QUERY TEXT,
    vSIZE_SEARCH INTEGER,
    vREGION_ID INTEGER,
    vSENGINE_ID INTEGER
) RETURNS INTEGER AS $$
    DECLARE vCONDITION_ID INTEGER;
    BEGIN

        SELECT TRIM(vCONDITION_QUERY) INTO vCONDITION_QUERY;

        IF vCONDITION_QUERY IS NULL OR vCONDITION_QUERY = '' THEN
            RAISE EXCEPTION 'CONDITION_INSERT_IGNORE: vCONDITION_QUERY is empty!';
        END IF;
        IF vSIZE_SEARCH IS NULL OR vSIZE_SEARCH <= 0 THEN
            RAISE EXCEPTION 'CONDITION_INSERT_IGNORE: vSIZE_SEARCH is incorrect!';
        END IF;
        IF vREGION_ID IS NOT NULL AND NOT EXISTS (SELECT 1 FROM regions WHERE REGION_ID = vREGION_ID) THEN
            RAISE EXCEPTION 'CONDITION_INSERT_IGNORE: vREGION_ID is incorrect!';
        END IF;
        IF vSENGINE_ID IS NULL OR NOT EXISTS (SELECT 1 FROM sengines WHERE SENGINE_ID = vSENGINE_ID) THEN
            RAISE EXCEPTION 'CONDITION_INSERT_IGNORE: vSENGINE_ID is incorrect!';
        END IF;

        SELECT
                CONDITION_ID INTO vCONDITION_ID
            FROM
                conditions
            WHERE
                CONDITION_QUERY = vCONDITION_QUERY
                AND SIZE_SEARCH = vSIZE_SEARCH
                AND CASE
                        WHEN vREGION_ID IS NULL THEN REGION_ID IS NULL
                        ELSE REGION_ID = vREGION_ID
                    END
                AND SENGINE_ID = vSENGINE_ID;

        IF vCONDITION_ID IS NULL THEN

           INSERT INTO conditions (CONDITION_QUERY, SIZE_SEARCH, REGION_ID, SENGINE_ID, DATE_CREATE) VALUES
                (vCONDITION_QUERY, vSIZE_SEARCH, vREGION_ID, vSENGINE_ID, NOW())
                RETURNING CONDITION_ID INTO vCONDITION_ID;

        END IF;

        RETURN vCONDITION_ID;

    END;
$$ LANGUAGE plpgsql;